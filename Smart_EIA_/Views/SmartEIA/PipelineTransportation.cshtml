@{
    ViewBag.Title = "PTT Smart EIA Regulatory";
    Layout = "~/Views/Shared/Content_Layout.cshtml";
}
    <head>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
        <script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=false&libraries=drawing"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
        <script src="~/Scripts/jquery-3.3.1.min.js"></script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDd33TLAVehao--qEJ9u7j7ZNSjN1315C0&libraries=drawing&callback=initMap"
                async defer></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>

        <script type="text/javascript" src="~/Scripts/FlowScript/Pipeline/PipeLine_JavaScript.js"></script>
        <style>

            .map {
                background-color: #fff;
                width: 100%;
                padding: 5px;
                height: 700px;
                float: left;
            }

            #map {
                width: 100%;
                height: 100%;
            }

            #Resulte, .GasSystem, .status, .pressure, .size, .area, .riverarea, .detail_duplicate_location, #show_detail_upload_file {
                display: none;
            }

            #color-palette {
                clear: both;
            }

            .color-button {
                width: 14px;
                height: 14px;
                font-size: 0;
                margin: 2px;
                float: left;
                cursor: pointer;
            }

            #delete-button {
                margin-top: 5px;
            }

            #a {
                padding: 5px;
                border: solid 2px black;
            }

            #b {
                padding: 5px;
                border: solid 2px gray;
            }
        </style>

    </head>
<body >
    <div class="xxx" style="padding: 5px 0px 5px 5px; display: flex; flex-wrap:wrap;">
        <div class="header-banner">
            <div class="btx">
                <div class="img-ss">
                    <img src="@Url.Content("~/Content/template/")img/link-2.svg" alt="" width="90px" height="90px">
                </div>
                <p>
                    2. โครงการระบบขนส่งปิโตรเลียมและน้ำมันเชื้อเพลิงทางท่อ
                </p>
            </div>
        </div>
    </div>

    <div class="contain-index" style="padding: 15px 0px; background-color: #e7eef1; overflow-x: hidden;">
        <div class="row" style=" margin-right: 0px;margin-left: 0px;">
            <div class="col-lg-12 nopadding">
                <span class="ss-btn" onclick="ss_l_menu()"><i class="fas fa-chevron-right"></i></span>
                <div class="l-menu bg-gg nopadding">
                    <div class="data-col">
                        <p class="ddda">
                            1.ระบุที่ตั้งโครงการ
                        </p>
                        <div class="pp-list">
                            <div class="list-p" onclick="sliderr(1)">
                                <p class="hh">
                                    พิกัดที่ตั้ง
                                </p>
                            </div>
                            <div class="dt-slide" id="ss-1">
                                <div class="sl-input" id="sd-1">
                                    <h5> ระบุพิกัด UTM WGS 84 </h5>
                                    <p>Zone:  <select id="zone_data"><option>47</option> <option>48</option></select></p>
                                    <hr />
                                    <p>East: <!--lat--> <input id="lat" type="text" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" /></p>
                                    <p>North:<!--lng--> <input id="lng" type="text" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');" /></p>
                                    <button class="ee-bb" onclick="check_inmap(1)">OK</button>
                                </div>
                            </div>
                            <div class="list-p" onclick="sliderr(2)">
                                <p class="hh">
                                    กำหนดเอง
                                </p>
                            </div>
                            <div class="dt-slide" id="ss-2">
                                <div class="sl-input" id="sd-2">
                                    <button onclick="">Add placemark</button>
                                    <button onclick="call()">Draw line or shape</button>

                                    <select id="testdraw" class="txa-50" size="5" onchange="test()">
                                        <option value="1">พื้นทีี่ A </option>
                                        <option value="2">พื้นที่ B</option>
                                        <option value="3">พื้นทีี่ C</option>
                                        <option value="4">พื้นที่ D</option>
                                    </select>
                                </div>
                            </div>

                            <div class="list-p" onclick="sliderr(3)">
                                <p class="hh">
                                    ตำแหน่งจากข้อมูล kmz ไฟล์
                                </p>
                            </div>
                            @* add file  *@
                            <div class="dt-slide" id="ss-3">
                                <div class="sl-input" id="sd-3">
                                    <button id="buttonfile" onclick="thisFileUpload()">Import Kmz</button>
                                    <button onclick="removeAll()">Clear</button>
                                    <button class="ee-bb" onclick="check_inmap(2)">OK</button>
                                    <input type="file" id="files" hidden />
                                    <select class="txa-50" size="5" id="list">
                                        <option onclick="pipe()">ท่อ5.kmz</option>
                                        <!-- <option onclick="pipe1()">2017-5FTP.kmz</option>-->

                                    </select>
                                </div>
                            </div>
                            <div class="list-p" onclick="sliderr(4)">
                                <p class="hh">
                                    ไม่ระบุที่ตั้งโครงการ
                                </p>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="row no_mr">
                    <div class="col-md-8">
                        <div class="map">
                            <div id="map"></div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="nopadding ">
                            <div class="data-col">
                                <div class="specify">
                                    <p class="ddda" style="margin-top: 10px;">
                                        2.ระบุรายละเอียดโครงการ
                                    </p>
                                    <div class="type">
                                        <p>
                                            ประเภทปิโตรเลียม  <i class="fa fa-info-circle" data-toggle="tooltip" title="ตามกฎหมายว่าด้วยปิโตรเลียม"></i>
                                            <select id="selecttypes" class="form-control">
                                                <option value="none" selected>--เลือกประเภทปิโตรเลียม--</option>
                                                <option value="ng">ก๊าซธรรมชาติ (Natural Gas)</option>
                                                <option value="ngl"> ก๊าซปิโตรเลียมเหลว (Liquefied Petroleum Gas) </option>
                                                <option value="lpg">ก๊าซโซลีนธรรมชาติ (Natural Gasoline)  </option>
                                                <option value="oil">น้ำมันเชื้อเพลิง (Fuel Oil)</option>
                                                <option value="hydrocarbon">ปิโตรเลียมอื่น ๆ (Other Petroleum) </option>
                                            </select>
                                        </p>
                                    </div>

                                    <div class="GasSystem">
                                        <p>
                                            พื้นที่วางท่อ
                                            <select id="selectGasSystem" class="form-control">
                                                <option value="none" selected>--เลือกพื้นที่วางท่อ-</option>
                                                <option value="ground">บนบก</option>
                                                <option value="water">ในทะเล</option>
                                            </select>
                                        </p>
                                    </div>

                                    <div class="status">
                                        <p>
                                            สถานะ
                                            <select id="selectstatus" class="form-control">
                                                <option value="none" selected>--เลือกสถานะ--</option>
                                                <option value="gas">ก๊าซ (Gas) เช่น CNG NG </option>
                                                <option value="liquid">ของเหลว (Liquid) เช่น LNG</option>
                                            </select>
                                        </p>
                                    </div>

                                    <div class="pressure">
                                        <p>
                                            ความดันใช้งานสูงสุด (Maximum Operating Pressure; MOP)   <i class="fa fa-info-circle" data-toggle="tooltip" title="20 barg = 290 psig (1 barg = 14.5 psig)"></i>

                                            <select id="selectpressure" class="form-control">
                                                <option value="none" selected>--เลือกความดัน--</option>
                                                <option value="1">น้อยกว่า 20 บาร์ (barg) หรือ เท่ากับ 20 บาร์ (barg)</option>
                                                <option value="2">มากกว่า 20 บาร์ (barg)</option>
                                            </select>
                                        </p>

                                    </div>

                                    <div class="size">
                                        <p>
                                            ขนาดเส้นผ่านศูนย์กลางของท่อ   <i class="fa fa-info-circle" data-toggle="tooltip" title="Nominal Pipe Size "></i>
                                            <select id="selectsize" class="form-control">
                                                <option value="" selected>--เลือกขนาดท่อ--</option>
                                                <option value="1">น้อยกว่า 16 นิ้ว หรือ เท่ากับ 16 นิ้ว</option>
                                                <option value="2">มากกว่า 16 นิ้ว</option>
                                            </select>
                                        </p>
                                    </div>

                                    <div id="okbtn" class="pc-btn">
                                        <hr />
                                        <button class="ee-bb" id="Btnok">ตกลง</button>
                                    </div>

                                    <div class="area">
                                        <p>
                                            แนวท่อทั้งหมดอยู่ในเขตนิคมอุตสาหกรรม
                                            <div class="detail_duplicate_location"></div>
                                            <label style="float:right;"><input type="checkbox" id="s1" onClick="Select1()" />  กำหนดเอง</label>
                                            <!-- แก้ข้อความตรงนี้ -->
                                            <input type="text" id="show_detail_upload_file" />
                                            <select id="selectarea" class="form-control" disabled>
                                                <option value="in" selected>อยู่</option>
                                                <option value="out">อยู่บางส่วน</option>
                                                <option value="out">ไม่อยู่</option>

                                            </select>
                                            <br />
                                            <div class="pc-btn"><button id="Btnarea" class="ee-bb"> ตกลง </button></div>
                                        </p>
                                    </div>

                                    <div class="riverarea">
                                        <p>
                                            อยู่ในพื้นที่ชั้นคุณภาพลุ่มน้ำ ชั้น 1  <label style="float:right;"><input type="checkbox" id="s2" onClick="Select2()" />  กำหนดเอง</label>
                                            <select id="selectriverarea" class="form-control" disabled>
                                                <option value="y" selected>อยู่</option>
                                                <option value="n">ไม่อยู่</option>
                                            </select>
                                        </p>
                                        <br />
                                        <div class="pc-btn">  <button id="Btnriverarea" class="ee-bb"> ตกลง </button></div>
                                    </div>

                                </div>
                                <div id="Resulte">
                                    <h4 style="width:100%; text-align:left;"><u>สรุปผล</u></h4>
                                    <h5 id="label1">โครงการ กิจการ หรือการดำเนินการ <u id="changeLabel" style="color:red;">เข้าข่าย</u> ต้องจัดทำรายงานด้านสิ่งแวดล้อม</h5>
                                    <hr />
                                    <div id="inresulte">
                                        <h5 id="label2">ประเภท</h5>
                                        <h5 id="labeltype">
                                            EHIA
                                        </h5>
                                        <!--   <hr />
         <h5 id="label3">เสนอต่อ</h5>
         <p style="width:100%;">
           <img id="imglogo" src="" width="50px" height="50px" style="background-color:white;" />
        <p id="labeloffer">สผ.</p>
        </p>
        <hr />
        <h5 id="label4">ตามกฎหมาย</h5>
        <p id="labellaw">เรื่อง...</p>
        <hr />-->
                                    </div>
                                    <div class="pc-btn">  <button class="ee-bb" onclick="hideresulte()">&uarr; ย้อนกลับ</button></div><br />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="footer-banner">
        <div class="ffff">
        </div>
    </div>
</body>

<script>
    var file_map_data = ["C:/Users/Admin/source/repos/PTT_Smart_EIA/PTT_Smart_EIA/App_Data/UploadedFiles/data_DB.json"];
    var countyLayer = [];//["test.geojson"];
    var data_obj = {};
    var status_check_position_inlocation;
    var list_position_inlocation = [];
    var bermudaTriangle = [];
    var check_data_in_area = [];


    function del() {
        bermudaTriangle.setMap(null);
    }
    function test() {
        $("#testdraw").change(function () {
            var test = $("#testdraw").find(":selected").val();
            if (test == "1") {
                /*in y */
                var triangleCoords = [
                    { lat: 13.134223768510942, lng: 101.16901142676424 },
                    { lat: 13.128790657872644, lng: 101.16789562781405 },
                    { lat: 13.129501148402044, lng: 101.16115791876864 },
                    { lat: 13.134808865564281, lng: 101.16253120978426 }
                ];

                // Construct the polygon.
                var bermudaTriangle = new google.maps.Polygon({
                    paths: triangleCoords,
                    strokeColor: '#4B0082',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#FF0000',
                    fillOpacity: 0.35
                });

                map.panTo({ lat: 13.134223768510942, lng: 101.16901142676424 });
                map.setZoom(15);
                bermudaTriangle.setMap(map);
                // bermudaTriangle.setMap(map);
                // Set option selected onchange
                var test = $("#testdraw").find(":selected").val();
                value = "in";
                // Set selected
                $('#selectarea').val(value);
                $('#selectarea').val('in').trigger('change');
                $('#selectriverarea').val(value);
                $('#selectriverarea').val('y').trigger('change');
            }
            else if (test == "2") {
                /*out n*/
                var triangleCoords = [
                    { lat: 13.144456493669955, lng: 101.14824183191638 },
                    { lat: 13.144874402855818, lng: 101.15257628168445 },
                    { lat: 13.139483319727729, lng: 101.15270502771716 },
                    { lat: 13.13931615246638, lng: 101.14841349329333 }
                ];

                // Construct the polygon.
                var bermudaTriangle = new google.maps.Polygon({
                    paths: triangleCoords,
                    strokeColor: '#4B0082',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#FF0000',
                    fillOpacity: 0.35
                });

                map.panTo({ lat: 13.134223768510942, lng: 101.16901142676424 });
                map.setZoom(15);
                bermudaTriangle.setMap(map);
                // bermudaTriangle.setMap(map);
                // Set option selected onchange
                var test = $("#testdraw").find(":selected").val();
                value = "in";
                // Set selected
                $('#selectarea').val(value);
                $('#selectarea').val('out').trigger('change');
                $('#selectriverarea').val(value);
                $('#selectriverarea').val('n').trigger('change');
            }
            else if (test == "3") {
                /*in n*/

                /* */
                var triangleCoords = [
                    { lat: 13.120348201394401, lng: 101.15845425208163 },
                    { lat: 13.123909790559647, lng: 101.16442680358887 },
                    { lat: 13.124778437495687, lng: 101.1527035959537 },
                    { lat: 13.121393075595345, lng: 101.15150196631502 }
                ];

                // Construct the polygon.
                var bermudaTriangle = new google.maps.Polygon({
                    paths: triangleCoords,
                    strokeColor: '#4B0082',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#4B0082',
                    fillOpacity: 0.35
                });

                map.panTo({ lat: 13.123909790559647, lng: 101.16442680358887 });
                map.setZoom(15);
                bermudaTriangle.setMap(map);
                // bermudaTriangle.setMap(map);
                // Set option selected onchange
                var test = $("#testdraw").find(":selected").val();
                value = "in";
                // Set selected
                $('#selectarea').val(value);
                $('#selectarea').val('in').trigger('change');
                $('#selectriverarea').val(value);
                $('#selectriverarea').val('n').trigger('change');

            }
            else {
                /*in y */
                // bermudaTriangle.setMap(null);
                var triangleCoords = [
                    { lat: 13.129250387273366, lng: 101.1504719980533 },
                    { lat: 13.133095363113823, lng: 101.15141613562655 },
                    { lat: 13.13342970599428, lng: 101.14467842658114 },
                    { lat: 13.129793702728612, lng: 101.14347679694247 }
                ];
                // Construct the polygon.
                var bermudaTriangle = new google.maps.Polygon({
                    paths: triangleCoords,
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#FF0000',
                    fillOpacity: 0.35
                });
                map.panTo({ lat: 13.129250387273366, lng: 101.1504719980533 });
                map.setZoom(15);

                bermudaTriangle.setMap(map);

                var test = $("#testdraw").find(":selected").val();
                value = "out";
                // Set selected
                $('#selectarea').val(value);
                $('#selectarea').val('out').trigger('change');
                $('#selectriverarea').val(value);
                $('#selectriverarea').val('y').trigger('change');


            }
        });
    }
    function handleFileSelect(evt) {
        var files = evt.target.files; // FileList object

        // files is a FileList of File objects. List some properties.
        var output = [];
        for (var i = 0, f; f = files[i]; i++) {
            output.push('<option>', f.name, '</option>');
        }
        document.getElementById('list').innerHTML = output.join('');
    }
    document.getElementById('files').addEventListener('change', handleFileSelect, false);
    /*map*/
    var map;
    var drawingManager;
    var selectedShape;
    var colors = ['#1E90FF', '#FF1493', '#32CD32', '#FF8C00', '#4B0082'];
    var selectedColor;
    var colorButtons = {};
    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 13.847860, lng: 100.604274 },
            mapTypeControl: true,
            mapTypeControlOptions: {
                style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                position: google.maps.ControlPosition.LEFT_TOP
            },
            zoomControl: true,
            zoomControlOptions: {
                position: google.maps.ControlPosition.RIGHT_BOTTOM
            },
            scaleControl: true,
            streetViewControl: true,
            streetViewControlOptions: {
                position: google.maps.ControlPosition.RIGHT_BOTTOM
            },
            fullscreenControl: true,
            fullscreenControlOptions: {
                position: google.maps.ControlPosition.RIGHT_BOTTOM
            },
            zoom: 10
        });

        var polyOptions = {
            strokeWeight: 0,
            fillOpacity: 0.45,
            editable: true,
            draggable: true
        };
        // add data file to map
        //for (var fl = 0; fl < file_map_data.length; fl++) {
            countyLayer = new google.maps.Data();
        //C:\Users\Admin\source\repos\PTT_Smart_EIA\PTT_Smart_EIA\App_Data\UploadedFiles\data_DB.json
        //C:\Users\Admin\source\repos\PTT_Smart_EIA\PTT_Smart_EIA\Views\SmartEIA\PipelineTransportation.cshtml
        // ;
            countyLayer.loadGeoJson('/Scripts/mng_view/data_DB.json');//data_DB.json
            countyLayer.setStyle({
                strokeColor: 'red',
                strokeWeight: 1
            });
            countyLayer.setMap(map);
       // }

        // Creates a drawing manager attached to the map that allows the user to draw
        // markers, lines, and shapes.
        drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: google.maps.drawing.OverlayType.POLYGON,
            markerOptions: {
                draggable: true
            },
            polylineOptions: {
                editable: true,
                draggable: true
            },
            rectangleOptions: polyOptions,
            circleOptions: polyOptions,
            polygonOptions: polyOptions,
            map: map
        });

        google.maps.event.addListener(drawingManager, 'overlaycomplete', function (e) {

            var newShape = e.overlay;
            newShape.type = e.type;
            var parths = [];
            parths.push();

            if (e.type !== google.maps.drawing.OverlayType.MARKER) {
                // Switch back to non-drawing mode after drawing a shape.
                drawingManager.setDrawingMode(null);

                // Add an event listener that selects the newly-drawn shape when the user
                // mouses down on it.

                google.maps.event.addListener(newShape, 'click', function (e) {
                    if (e.vertex !== undefined) {
                        if (newShape.type === google.maps.drawing.OverlayType.POLYGON) {
                            var path = newShape.getPaths().getAt(e.path);
                            path.removeAt(e.vertex);
                            if (path.length < 3) {
                                newShape.setMap(null);
                            }
                        }
                        if (newShape.type === google.maps.drawing.OverlayType.POLYLINE) {
                            var path = newShape.getPath();
                            path.removeAt(e.vertex);
                            if (path.length < 2) {
                                newShape.setMap(null);
                            }
                        }
                    }
                    setSelection(newShape);
                });
                setSelection(newShape);
            }
            else {
                google.maps.event.addListener(newShape, 'click', function (e) {
                    setSelection(newShape);
                });
                setSelection(newShape);
            }
        });
        // map.data.loadGeoJson('https://raw.githubusercontent.com/Naphatsanan1280/Kmlfile/master/Indrustry.geojson');

        // Clear the current selection when the drawing mode is changed, or when the
        // map is clicked.
        google.maps.event.addListener(drawingManager, 'drawingmode_changed', clearSelection);
        google.maps.event.addListener(map, 'click', clearSelection);
        google.maps.event.addDomListener(document.getElementById('delete-button'), 'click', deleteSelectedShape);

        buildColorPalette();


        var ctaLayer = new google.maps.KmlLayer({
            url: 'https://github.com/Naphatsanan1280/Kmlfile/blob/master/Industrial_Estate_Boundary.kmz?raw=true'
        });
        ctaLayer.setMap(map);




        var latlngcl = [];
        google.maps.event.addListener(ctaLayer, 'click', function (evt) {
            console.log(evt.latLng.lat() + "  " + evt.latLng.lng());

        });
        google.maps.event.addListener(map, 'click', function (event) {
            console.log(event.latLng);   // Get latlong info as object.
            console.log("Latitude: " + event.latLng.lat() + " " + ", longitude: " + event.latLng.lng()); // Get separate lat long.
        });

        google.maps.event.addListener(drawingManager, 'click', function (event) {

            console.log("Latitude: " + event.latLng.lat() + " " + ", longitude: " + event.latLng.lng()); // Get separate lat long.

        });

    }

    // function in menu
    //'/../Views/mng_view/data_DB.json
    //C:\Users\Admin\source\repos\PTT_Smart_EIA\PTT_Smart_EIA\Views\SmartEIA\mng_view\Stuk-jszip-bead269\dist\jszip.js
    $.getScript('@Url.Content("/Scripts/mng_view/Stuk-jszip-bead269/dist/jszip.js")', function () // get scrip in file
    {

        let getDom = xml => (new DOMParser()).parseFromString(xml, "text/xml")
        let getExtension = fileName => fileName.split(".").pop()

        let getKmlDom = (kmzFile) => {
            var zip = new JSZip()
            return zip.loadAsync(kmzFile)
                .then(zip => {
                    let kmlDom = null
                    zip.forEach((relPath, file) => {
                        if (getExtension(relPath) === "kml" && kmlDom === null) {
                            kmlDom = file.async("string").then(getDom)
                        }
                    })
                    return kmlDom || Promise.reject("No kml file found")
                });
        }


        var f = document.getElementById("files")
        f.addEventListener("change", e => {
            var last_name = e.target.files[0].name.split('.');
            //alert(last_name[1]);
            if (last_name[1] == "kmz" || last_name[1] == "KMZ") {
                let geoJson = getKmlDom(e.target.files[0]).then(kmlDom => {
                    let geoJsonObject = toGeoJSON.kml(kmlDom)
                    return JSON.stringify(geoJsonObject)
                })
                //geoJson.then(value => document.getElementById("output").innerText = value);
                geoJson.then(function (val) {
                    set_data_kmz_file(val);
                });
            }
            else {
                alert("ใช้ไฟล์ KMZ เท่านั้น");
            }

        })
    });
    function set_data_kmz_file(data) {
        data_obj = JSON.parse(data);

    }

    function check_inmap(type_mng) {
        var point_is1 = [];
        var status = false;
        var loop_add = 0;
        if (bermudaTriangle.length > 0) {
            console.log(bermudaTriangle.length);
            for (var i = 0; i < bermudaTriangle.length; i++) {
                bermudaTriangle[i].setMap(null);
            }

        }
        if (type_mng == 1) {
            status = true;
            var East = $('#lat').val(),
                North = $('#lng').val(),
                zone = $('#zone_data').val();
            var list_data = utmToLatLng(zone, East, North);
            console.log(list_data);
            point_is1 = [
                [list_data.latitude, list_data.longitude],
            ];
             bermudaTriangle[loop_add] = new google.maps.Marker({
                position: point_is1,
                map: map
             });
             loop_add++;
            console.log(point_is1);
        }
        else if (type_mng == 2) {
            status = true;
            var sub_data = [];
            var data_all = [];
            var array_set = [];
            var opts = {};
            var path = [];//
            for (var i = 0; i < data_obj.features.length; i++) {
                var data_sort = data_obj.features[i].geometry; //
                if (data_sort.type == "GeometryCollection") {

                    for (var j = 0; j < data_sort.geometries[0].coordinates.length; j++) {
                        var ll = new google.maps.LatLng(data_sort.geometries[0].coordinates[j][1], data_sort.geometries[0].coordinates[j][0]);
                        path.push(ll);
                        point_is1.push([data_sort.geometries[0].coordinates[j][1], data_sort.geometries[0].coordinates[j][0]]);
                    }
                }
                else {
                    for (var j = 0; j < data_sort.coordinates.length; j++) {
                        var ll = new google.maps.LatLng(data_sort.coordinates[j][1], data_sort.coordinates[j][0]);
                        path.push(ll);
                        point_is1.push([data_sort.coordinates[j][1], data_sort.coordinates[j][0]]);
                    }
                    //"LineString"

                }
            }
            opts.path = path;
            bermudaTriangle[loop_add] = new google.maps.Polyline(opts);
            bermudaTriangle[loop_add].setMap(map);
            loop_add++;
            //console.log(data_obj);

        }
        else if (type_mng == 3) {
            status = true;

        }
        if (status) {
            var point = "";
            status_check_position_inlocation = false;
            list_position_inlocation = [];

            $.getJSON('@Url.Content("/Scripts/mng_view/data_DB.json")' , function (data) {
                for (var lo_ch = 0; lo_ch < point_is1.length; lo_ch++) {
                    point = new google.maps.LatLng(point_is1[lo_ch][0], point_is1[lo_ch][1]);
                    //bermudaTriangle[i] = new google.maps.Marker(point);

                    //console.log(data.features[0].geometry.coordinates[0][0]);
                    var data_all = [];
                    var array_set = [];
                    for (var i = 0; i < data.features.length; i++) {
                        var data_sort = data.features[i].geometry.coordinates[0][0];
                        var data_set = [];
                        var data_add = "";
                        for (var j = 0; j < data_sort.length; j++) {
                            // point_is = new google.maps.LatLng(data_sort[j][1], data_sort[j][0]);
                            data_set.push({
                                lat: data_sort[j][1], lng: data_sort[j][0]
                            });
                        }
                        array_set.push({
                            name_polygon: data.features[i].properties.Name,
                            own_polygon: data.features[i].properties.Owner,
                            location: data_set
                        });
                    }
                    data_all.push({
                        type: "MultiPolygon",
                        coordinates: array_set
                    });
                    //console.log(data_all);


                    for (var i = 0; i < data_all[0].coordinates.length; i++) {
                        check_data_in_area[i] = new google.maps.Polygon({
                            paths: data_all[0].coordinates[i].location,
                        });
                        if (google.maps.geometry.poly.containsLocation(point, check_data_in_area[i]) == true) {
                            //console.log(data_all[0].coordinates[i].name_polygon);
                            set_data_show(true, data_all[0].coordinates[i].name_polygon);
                        }
                    }
                    //console.log(data_all[0].coordinates.length);
                }
                if (status_check_position_inlocation) {
                    var name_position = "<p>";
                    for (var i = 0; i < list_position_inlocation.length; i++) {
                        name_position += list_position_inlocation[i] + '<br>';
                    }
                    name_position += '</p>';
                    $('.detail_duplicate_location').html('<h1 style="color:green;">อยู่ในพื้นที่</h1><br>' + name_position);
                     $("#selectarea").val("in").change();
                     //out
                }
                else {
                    //alert("N");
                   // $('.area').html('<h1 style="color:red;">ไม่อยู่ในพื้นที่</h1>');
                    $("#selectarea").val("out").change();
                }
            });

        }
        else {
            alert("กรุณาป้อนข้อมูล");

        }
    }

    function set_data_show(conditon, name_location_dupli) {
        status_check_position_inlocation = conditon;
        if (list_position_inlocation.indexOf(name_location_dupli) < 0) {
            list_position_inlocation.push(name_location_dupli);
        }

    }

    //end function in menu

    google.maps.event.addDomListener(window, 'load', initMap);
    function pipe1() {
        //<option>ท่อ5.kmz</option>

        var Layer = new google.maps.KmlLayer({
            url: 'https://github.com/Naphatsanan1280/Kmlfile/blob/master/2017-5FTP.kmz?raw=true'
        });
        Layer.setMap(map);

    }


    function pipe() {
        //<option>ท่อ5.kmz</option>
        var ctaLayer = new google.maps.KmlLayer({
            url: 'https://github.com/Naphatsanan1280/Kmlfile/blob/master/%E0%B8%97%E0%B9%88%E0%B8%AD%205.kmz?raw=true'
        });
        ctaLayer.setMap(map);
    }
    function clearSelection() {
        if (selectedShape) {
            if (selectedShape.type !== 'marker') {
                selectedShape.setEditable(false);
            }

            selectedShape = null;
        }
    }

    function setSelection(shape) {
        if (shape.type !== 'marker') {
            clearSelection();
            shape.setEditable(true);
            selectColor(shape.get('fillColor') || shape.get('strokeColor'));
        }

        selectedShape = shape;
    }

    function deleteSelectedShape() {
        if (selectedShape) {
            selectedShape.setMap(null);
        }
    }

    function selectColor(color) {
        selectedColor = color;
        for (var i = 0; i < colors.length; ++i) {
            var currColor = colors[i];
            colorButtons[currColor].style.border = currColor == color ? '2px solid #789' : '2px solid #fff';
        }

        // Retrieves the current options from the drawing manager and replaces the
        // stroke or fill color as appropriate.
        var polylineOptions = drawingManager.get('polylineOptions');
        polylineOptions.strokeColor = color;
        drawingManager.set('polylineOptions', polylineOptions);

        var rectangleOptions = drawingManager.get('rectangleOptions');
        rectangleOptions.fillColor = color;
        drawingManager.set('rectangleOptions', rectangleOptions);

        var circleOptions = drawingManager.get('circleOptions');
        circleOptions.fillColor = color;
        drawingManager.set('circleOptions', circleOptions);

        var polygonOptions = drawingManager.get('polygonOptions');
        polygonOptions.fillColor = color;
        drawingManager.set('polygonOptions', polygonOptions);
    }

    function setSelectedShapeColor(color) {
        if (selectedShape) {
            if (selectedShape.type == google.maps.drawing.OverlayType.POLYLINE) {
                selectedShape.set('strokeColor', color);
            } else {
                selectedShape.set('fillColor', color);
            }
        }
    }

    function makeColorButton(color) {
        var button = document.createElement('span');
        button.className = 'color-button';
        button.style.backgroundColor = color;
        google.maps.event.addDomListener(button, 'click', function () {
            selectColor(color);
            setSelectedShapeColor(color);
        });

        return button;
    }

    function buildColorPalette() {
        var colorPalette = document.getElementById('color-palette');
        for (var i = 0; i < colors.length; ++i) {
            var currColor = colors[i];
            var colorButton = makeColorButton(currColor);
            colorPalette.appendChild(colorButton);
            colorButtons[currColor] = colorButton;
        }
        selectColor(colors[0]);
    }

    function Select1() {
        var isChecked = document.getElementById("s1").checked;
        document.getElementById("selectarea").disabled = !isChecked;
    }
    function Select2() {
        var isChecked = document.getElementById("s2").checked;
        document.getElementById("selectriverarea").disabled = !isChecked;
    }
    function sliderr(n) {
        var dis = $('#ss-' + n).css('display');
        console.log(dis);
        if (dis == 'none') {
            $("#ss-" + n).css("display", "block");
            $("#sd-" + n).css("height", "auto");

        } else {
            $("#ss-" + n).css("display", "none");
            $("#sd-" + n).css("height", "0px");
        }
    }
    function ss_l_menu() {
        if ($(".ss-btn").hasClass("ww-100")) {
            $(".ss-btn").removeClass("ww-100");
            $(".l-menu").animate({ "left": "-400px" }, 300, "swing");
            $(".ss-btn").animate({ "left": "0px" }, 300, "swing");
            $(".ss-btn").html('<i class="fas fa-chevron-right"></i>')
        } else {
            $(".ss-btn").addClass("ww-100");
            $(".l-menu").animate({ "left": "0px" }, 300, "swing");
            $(".ss-btn").animate({ "left": "360px" }, 300, "swing");
            $(".ss-btn").html('<i class="fas fa-chevron-left"></i>')
        }

    }
    function ss_r_menu() {
        if ($(".ss-r-btn").hasClass("ww-100")) {
            $(".ss-r-btn").removeClass("ww-100");
            $(".r-menu").animate({ "right": "-400px" }, 300, "swing");
            $(".ss-r-btn").animate({ "right": "0px" }, 300, "swing");
            $(".ss-r-btn").html('<i class="fas fa-chevron-left"></i>')
        } else {
            $(".ss-r-btn").addClass("ww-100");
            $(".r-menu").animate({ "right": "0px" }, 300, "swing");
            $(".ss-r-btn").animate({ "right": "360px" }, 300, "swing");
            $(".ss-r-btn").html('<i class="fas fa-chevron-right"></i>')
        }

    }
    function hideresulte() {
        $("#Resulte").hide();
        $(".specify").show();
        $("#okbtn").hide();
    }
    /*flow*/
    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip();

    });

    $(document).ready(function () {
        $("#okbtn").hide();
        $("#selecttypes").on('change', function () {
            $('#selectGasSystem').prop('selectedIndex', 0);
            var type = $('#selecttypes').find(":selected").val();
            if (type == "none") {
                $("#okbtn").hide();
                $(".GasSystem").hide();
            }
            else if (type == "ng") {
                $("#okbtn").hide();
                $(".GasSystem").show();
                $("#selectGasSystem").on('change', function () {
                    var gassystem = $('#selectGasSystem').find(":selected").val();
                    if (gassystem == "none") {
                        $("#okbtn").hide();
                    }
                    else if (gassystem == "ground") {
                        $("#okbtn").hide();
                        $(".status").show();
                        $("#selectstatus").on('change', function () {
                            var status = $('#selectstatus').find(":selected").val();
                            if (status == "none") {
                                $("#okbtn").hide();
                            }
                            else if (status == "liquid") {
                                $("#okbtn").show();
                                $("#Btnok").click(function () {
                                    $(".pressure").hide();
                                    P_2_4();
                                });
                            }
                            else {
                                $("#okbtn").hide();
                                $(".pressure").show();
                                $("#selectpressure").on('change', function () {
                                    var pressure = $('#selectpressure').find(":selected").val();
                                    if (pressure == "none") {
                                        $("#okbtn").hide();
                                    }
                                    else if (pressure == "1") {
                                        $("#okbtn").hide();
                                        $(".size").show();
                                        $("#selectsize").on('change', function () {
                                            var size = $('#selectsize').find(":selected").val();
                                            if (size == "none") {
                                                $("#okbtn").hide();
                                            } else if (size == "1") {/*size <= 16*/
                                                $("#okbtn").hide();
                                                $(".riverarea").show();
                                                $(".area").hide();
                                                $("#Btnriverarea").click(function () {
                                                    var riverarea = $('#selectriverarea').find(":selected").val();
                                                    if (riverarea == "none") {
                                                        $("#okbtn").hide();
                                                    }
                                                    else if (riverarea == "y") {
                                                        P_2_3();
                                                    } else {
                                                        P_2_1();
                                                    }
                                                });
                                            }
                                            else if (size == "2") {/*size > 16*/
                                                $(".riverarea").hide();
                                                $(".area").show();
                                                $("#Btnarea").click(function () {
                                                    var area = $('#selectarea').find(":selected").val();
                                                    if (area == "none") {
                                                        alert("กรุณาเลือกพื้นที่");
                                                    } else if (area == "in") {
                                                        $(".riverarea").show();
                                                        $("#Btnriverarea").click(function () {
                                                            var riverarea = $('#selectriverarea').find(":selected").val();
                                                            if (riverarea == "none") {
                                                                $("#okbtn").hide();
                                                            } else if (riverarea == "y") {
                                                               P_2_3();
                                                            } else {
                                                               P_2_2();
                                                            }
                                                        });

                                                    } else {
                                                        $(".riverarea").hide();
                                                        P_2_4();
                                                    }
                                                });
                                            }
                                        });
                                    }
                                    else {
                                        $("#okbtn").hide();
                                        $(".size").show();
                                        $("#selectsize").on('change', function () {
                                            var size = $('#selectsize').find(":selected").val();
                                            if (size == "none") {
                                                $("#okbtn").hide();
                                                alert("กรุณาเลือกขนาดเส้นผ่านศูนย์กลางของท่อ");
                                            } else if (size == "1" || size == "2") {
                                                $("#okbtn").show();
                                                $("#Btnok").click(function () {
                                                    $(".riverarea").hide();
                                                    $(".area").show();
                                                    $("#Btnarea").click(function () {
                                                        var area = $('#selectarea').find(":selected").val();
                                                        if (area == "none") { alert("กรุณาเลือกพื้นที่"); }
                                                        else if (area == "in") {
                                                            $(".riverarea").show();
                                                            $("#Btnriverarea").click(function () {
                                                                var riverarea = $('#selectriverarea').find(":selected").val();
                                                                if (riverarea == "none") { alert("กรุณาเลือกพื้นที่ชั้นคุณภาพลุ่มน้ำชั้น 1"); }
                                                                else if (riverarea == "y") {
                                                                   P_2_4();
                                                                } else {
                                                                    P_2_1();
                                                                }
                                                            });
                                                        } else {
                                                            $(".riverarea").hide();
                                                            P_2_4();
                                                        }
                                                    });
                                                });

                                            } else {
                                                $("#okbtn").hide();
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                    else {
                        $("#okbtn").show();
                        $("#Btnok").click(function () {
                            $(".GasSystem").hide();
                            $(".pressure").hide();
                            $(".size").hide();
                            $(".status").hide();
                            $(".area").hide();
                            $(".riverarea").hide();
                            P_2_4();
                        });
                    }
                });
            }
            else {
                $("#okbtn").show();
                $(".GasSystem").hide();
                $(".pressure").hide();
                $(".size").hide();
                $(".status").hide();
                $(".area").hide();
                $(".riverarea").hide();
                $("#Btnok").click(function () {
                    P_2_4();
                });
            }
        });
    });
   
    function enable_layer(e) {
        var kmlLayer;
        var id = $(e).val();
        if ($(e).is(":checked")) {
            kmlLayer = new google.maps.KmlLayer(kml[id].url, {
                suppressInfoWindows: true,
                preserveViewport: true
            });
            kmlLayer.addListener('click', function (kmlEvent) {
                var text = kmlEvent.featureData.description;

                /*showInContentWindow(text);*/
            });

            function showInContentWindow(text) {
                var sidediv = document.getElementById('divResults');
                sidediv.innerHTML = text;
            }
            kml[id].obj = kmlLayer;
            kml[id].obj.setMap(map);
        } else {
            console.log('close');
            kml[id].obj.setMap(null);
            delete kml[id].obj;
        }
    }
    function removeAll() {
        var Select2 = document.getElementById('list');
        Select2.remove(Select2.selectedIndex);
    }
    function loadGeoJsonString(geoString) {
        var geojson = JSON.parse(geoString);
        map.data.addGeoJson(geojson);
        zoom(map);
    }
    function zoom(map) {
        var bounds = new google.maps.LatLngBounds();
        map.data.forEach(function (feature) {
            processPoints(feature.getGeometry(), bounds.extend, bounds);
        });
        map.fitBounds(bounds);
    }
    function processPoints(geometry, callback, thisArg) {
        if (geometry instanceof google.maps.LatLng) {
            callback.call(thisArg, geometry);
        } else if (geometry instanceof google.maps.Data.Point) {
            callback.call(thisArg, geometry.get());
        } else {
            geometry.getArray().forEach(function (g) {
                processPoints(g, callback, thisArg);
            });
        }
    }
    function handleDrop(e) {
        var files = e.dataTransfer.files;
        if (files.length) {
            // process file(s) being dropped
            // grab the file data from each file
            for (var i = 0, file; file = files[i]; i++) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    loadGeoJsonString(e.target.result);
                };
                reader.onerror = function (e) {
                    console.error('reading failed');
                };
                reader.readAsText(file);
            }
        } else {
            // process non-file (e.g. text or html) content being dropped
            // grab the plain text version of the data
            var plainText = e.dataTransfer.getData('text/plain');
            if (plainText) {
                loadGeoJsonString(plainText);
            }
        }

        // prevent drag event from bubbling further
        return false;
    }
    function thisFileUpload() {
        $("#files").click();
    }
    function utmToLatLng(zone, easting, northing) {


        var a = 6378137;
        var e = 0.081819191;
        var e1sq = 0.006739497;
        var k0 = 0.9996;

        var arc = northing / k0;
        var mu = arc / (a * (1 - Math.pow(e, 2) / 4.0 - 3 * Math.pow(e, 4) / 64.0 - 5 * Math.pow(e, 6) / 256.0));

        var ei = (1 - Math.pow((1 - e * e), (1 / 2.0))) / (1 + Math.pow((1 - e * e), (1 / 2.0)));

        var ca = 3 * ei / 2 - 27 * Math.pow(ei, 3) / 32.0;

        var cb = 21 * Math.pow(ei, 2) / 16 - 55 * Math.pow(ei, 4) / 32;
        var cc = 151 * Math.pow(ei, 3) / 96;
        var cd = 1097 * Math.pow(ei, 4) / 512;
        var phi1 = mu + ca * Math.sin(2 * mu) + cb * Math.sin(4 * mu) + cc * Math.sin(6 * mu) + cd * Math.sin(8 * mu);

        var n0 = a / Math.pow((1 - Math.pow((e * Math.sin(phi1)), 2)), (1 / 2.0));

        var r0 = a * (1 - e * e) / Math.pow((1 - Math.pow((e * Math.sin(phi1)), 2)), (3 / 2.0));
        var fact1 = n0 * Math.tan(phi1) / r0;

        var _a1 = 500000 - easting;
        var dd0 = _a1 / (n0 * k0);
        var fact2 = dd0 * dd0 / 2;

        var t0 = Math.pow(Math.tan(phi1), 2);
        var Q0 = e1sq * Math.pow(Math.cos(phi1), 2);
        var fact3 = (5 + 3 * t0 + 10 * Q0 - 4 * Q0 * Q0 - 9 * e1sq) * Math.pow(dd0, 4) / 24;

        var fact4 = (61 + 90 * t0 + 298 * Q0 + 45 * t0 * t0 - 252 * e1sq - 3 * Q0 * Q0) * Math.pow(dd0, 6) / 720;

        var lof1 = _a1 / (n0 * k0);
        var lof2 = (1 + 2 * t0 + Q0) * Math.pow(dd0, 3) / 6.0;
        var lof3 = (5 - 2 * Q0 + 28 * t0 - 3 * Math.pow(Q0, 2) + 8 * e1sq + 24 * Math.pow(t0, 2)) * Math.pow(dd0, 5) / 120;
        var _a2 = (lof1 - lof2 + lof3) / Math.cos(phi1);
        var _a3 = _a2 * 180 / Math.PI;

        var latitude = 180 * (phi1 - fact1 * (fact2 + fact3 + fact4)) / Math.PI;


        var longitude = ((zone > 0) && (6 * zone - 183.0) || 3.0) - _a3;

        var obj = {
            latitude: latitude,
            longitude: longitude
        };


        return obj;
    }

    $(function () {
        var data_duplicate = [];
        var loop_mng = [];
        // let json = require('Indrustry1.geojson');
        //
        var loop_mng = [];
        var data = [];

        //let json = require('นิคมอุตสาหกรรม1.json');
        $.getJSON('https://raw.githubusercontent.com/Naphatsanan1280/Kmlfile/master/Indrustry.geojson', function (data) {
            var array_set = [];
            for (var i = 0; i < data.features.length; i++) {
                var data_sort = data.features[i].geometry.coordinates[0][0];
                //console.log(data.features[0].geometry.coordinates[0][0]);
                var data_set = [];
                for (var j = 0; j < data_sort.length; j++) {
                    data_set.push(data_sort[j][0]);
                    data_set.push(data_sort[j][1]);
                }
                array_set[i] = {
                    id_companyy: data.features[i].properties.Id,
                    name_companny: data.features[i].properties.Name,
                    lat_long: data_set
                };
                //console.log(array_set[i]);
            }

            for (var i = 0; i < array_set.length; i++) {
                for (var j = 0; j < array_set.length; j++) {
                    let inttersection = array_set[i].lat_long.filter(x => array_set[j].lat_long.includes(x));
                    if (inttersection.length > 0 && i != j) {
                        if (!(loop_mng.includes(i))) {
                            loop_mng.push(i);
                            data_duplicate.push({
                                id_company1: array_set[i].id_companyy,
                                name_companny1: array_set[i].name_companny,
                                id_company2: array_set[j].id_companyy,
                                name_companny2: array_set[j].name_companny,
                                lat_long_duplicate1: inttersection
                            });
                        }
                    }
                }
            }
            //console.log(data_duplicate);
        });



        /*  $.getJSON('https://raw.githubusercontent.com/Naphatsanan1280/Kmlfile/master/Environmental_Protected_Area_M1.geojson', function (data) {
              var array_set = [];
              for (var i = 0; i < data.features.length; i++) {
                  var data_sort = data.features[i].geometry.coordinates[0][0];
                  //console.log(data.features[0].geometry.coordinates[0][0]);
                  var data_set = [];
                  for (var j = 0; j < data_sort.length; j++) {
                      data_set.push(data_sort[j][0]);
                      data_set.push(data_sort[j][1]);
                  }
                  array_set[i] = {
                      name_Area: data.features[i].properties.Area_Name,
                      lat_long: data_set
                  };
                  console.log(array_set[i]);
              }

              for (var i = 0; i < array_set.length; i++) {
                  for (var j = 0; j < array_set.length; j++) {
                      let inttersection = array_set[i].lat_long.filter(x => array_set[j].lat_long.includes(x));
                      if (inttersection.length > 0 && i != j) {
                          if (!(loop_mng.includes(i))) {
                              loop_mng.push(i);
                              data_duplicate.push({
                                  id_company1: array_set[i].id_companyy,
                                  name_companny1: array_set[i].name_companny,
                                  id_company2: array_set[j].id_companyy,
                                  name_companny2: array_set[j].name_companny,
                                  lat_long_duplicate1: inttersection
                              });
                          }
                      }
                  }
              }
              //console.log(data_duplicate);
          });

          $.getJSON('https://raw.githubusercontent.com/Naphatsanan1280/Kmlfile/master/Ramsar_site.geojson', function (data) {
              var array_set = [];
              for (var i = 0; i < data.features.length; i++) {
                  var data_sort = data.features[i].geometry.coordinates[0][0];
                  //console.log(data.features[0].geometry.coordinates[0][0]);
                  var data_set = [];
                  for (var j = 0; j < data_sort.length; j++) {
                      data_set.push(data_sort[j][0]);
                      data_set.push(data_sort[j][1]);
                  }
                  array_set[i] = {
                      name_Area: data.features[i].properties.W_Name_1,
                      lat_long: data_set
                  };
                  console.log(array_set[i]);
              }

              for (var i = 0; i < array_set.length; i++) {
                  for (var j = 0; j < array_set.length; j++) {
                      let inttersection = array_set[i].lat_long.filter(x => array_set[j].lat_long.includes(x));
                      if (inttersection.length > 0 && i != j) {
                          if (!(loop_mng.includes(i))) {
                              loop_mng.push(i);
                              data_duplicate.push({
                                  id_company1: array_set[i].id_companyy,
                                  name_companny1: array_set[i].name_companny,
                                  id_company2: array_set[j].id_companyy,
                                  name_companny2: array_set[j].name_companny,
                                  lat_long_duplicate1: inttersection
                              });
                          }
                      }
                  }
              }
              //console.log(data_duplicate);
          });*/

    });


    
var toGeoJSON = (function() {
    'use strict';

    var removeSpace = /\s*/g,
        trimSpace = /^\s*|\s*$/g,
        splitSpace = /\s+/;
    // generate a short, numeric hash of a string
    function okhash(x) {
        if (!x || !x.length) return 0;
        for (var i = 0, h = 0; i < x.length; i++) {
            h = ((h << 5) - h) + x.charCodeAt(i) | 0;
        } return h;
    }
    // all Y children of X
    function get(x, y) { return x.getElementsByTagName(y); }
    function attr(x, y) { return x.getAttribute(y); }
    function attrf(x, y) { return parseFloat(attr(x, y)); }
    // one Y child of X, if any, otherwise null
    function get1(x, y) { var n = get(x, y); return n.length ? n[0] : null; }
    // https://developer.mozilla.org/en-US/docs/Web/API/Node.normalize
    function norm(el) { if (el.normalize) { el.normalize(); } return el; }
    // cast array x into numbers
    function numarray(x) {
        for (var j = 0, o = []; j < x.length; j++) { o[j] = parseFloat(x[j]); }
        return o;
    }
    // get the content of a text node, if any
    function nodeVal(x) {
        if (x) { norm(x); }
        return (x && x.textContent) || '';
    }
    // get the contents of multiple text nodes, if present
    function getMulti(x, ys) {
        var o = {}, n, k;
        for (k = 0; k < ys.length; k++) {
            n = get1(x, ys[k]);
            if (n) o[ys[k]] = nodeVal(n);
        }
        return o;
    }
    // add properties of Y to X, overwriting if present in both
    function extend(x, y) { for (var k in y) x[k] = y[k]; }
    // get one coordinate from a coordinate array, if any
    function coord1(v) { return numarray(v.replace(removeSpace, '').split(',')); }
    // get all coordinates from a coordinate array as [[],[]]
    function coord(v) {
        var coords = v.replace(trimSpace, '').split(splitSpace),
            o = [];
        for (var i = 0; i < coords.length; i++) {
            o.push(coord1(coords[i]));
        }
        return o;
    }
    function coordPair(x) {
        var ll = [attrf(x, 'lon'), attrf(x, 'lat')],
            ele = get1(x, 'ele'),
            // handle namespaced attribute in browser
            heartRate = get1(x, 'gpxtpx:hr') || get1(x, 'hr'),
            time = get1(x, 'time'),
            e;
        if (ele) {
            e = parseFloat(nodeVal(ele));
            if (!isNaN(e)) {
                ll.push(e);
            }
        }
        return {
            coordinates: ll,
            time: time ? nodeVal(time) : null,
            heartRate: heartRate ? parseFloat(nodeVal(heartRate)) : null
        };
    }

    // create a new feature collection parent object
    function fc() {
        return {
            type: 'FeatureCollection',
            features: []
        };
    }

    var serializer;
    if (typeof XMLSerializer !== 'undefined') {
        /* istanbul ignore next */
        serializer = new XMLSerializer();
    } else {
        var isNodeEnv = (typeof process === 'object' && !process.browser);
        var isTitaniumEnv = (typeof Titanium === 'object');
        if (typeof exports === 'object' && (isNodeEnv || isTitaniumEnv)) {
            serializer = new (require('xmldom').XMLSerializer)();
        } else {
            throw new Error('Unable to initialize serializer');
        }
    }
    function xml2str(str) {
        // IE9 will create a new XMLSerializer but it'll crash immediately.
        // This line is ignored because we don't run coverage tests in IE9
        /* istanbul ignore next */
        if (str.xml !== undefined) return str.xml;
        return serializer.serializeToString(str);
    }

    var t = {
        kml: function(doc) {

            var gj = fc(),
                // styleindex keeps track of hashed styles in order to match features
                styleIndex = {}, styleByHash = {},
                // stylemapindex keeps track of style maps to expose in properties
                styleMapIndex = {},
                // atomic geospatial types supported by KML - MultiGeometry is
                // handled separately
                geotypes = ['Polygon', 'LineString', 'Point', 'Track', 'gx:Track'],
                // all root placemarks in the file
                placemarks = get(doc, 'Placemark'),
                styles = get(doc, 'Style'),
                styleMaps = get(doc, 'StyleMap');

            for (var k = 0; k < styles.length; k++) {
                var hash = okhash(xml2str(styles[k])).toString(16);
                styleIndex['#' + attr(styles[k], 'id')] = hash;
                styleByHash[hash] = styles[k];
            }
            for (var l = 0; l < styleMaps.length; l++) {
                styleIndex['#' + attr(styleMaps[l], 'id')] = okhash(xml2str(styleMaps[l])).toString(16);
                var pairs = get(styleMaps[l], 'Pair');
                var pairsMap = {};
                for (var m = 0; m < pairs.length; m++) {
                    pairsMap[nodeVal(get1(pairs[m], 'key'))] = nodeVal(get1(pairs[m], 'styleUrl'));
                }
                styleMapIndex['#' + attr(styleMaps[l], 'id')] = pairsMap;

            }
            for (var j = 0; j < placemarks.length; j++) {
                gj.features = gj.features.concat(getPlacemark(placemarks[j]));
            }
            function kmlColor(v) {
                var color, opacity;
                v = v || '';
                if (v.substr(0, 1) === '#') { v = v.substr(1); }
                if (v.length === 6 || v.length === 3) { color = v; }
                if (v.length === 8) {
                    opacity = parseInt(v.substr(0, 2), 16) / 255;
                    color = '#' + v.substr(6, 2) +
                        v.substr(4, 2) +
                        v.substr(2, 2);
                }
                return [color, isNaN(opacity) ? undefined : opacity];
            }
            function gxCoord(v) { return numarray(v.split(' ')); }
            function gxCoords(root) {
                var elems = get(root, 'coord', 'gx'), coords = [], times = [];
                if (elems.length === 0) elems = get(root, 'gx:coord');
                for (var i = 0; i < elems.length; i++) coords.push(gxCoord(nodeVal(elems[i])));
                var timeElems = get(root, 'when');
                for (var j = 0; j < timeElems.length; j++) times.push(nodeVal(timeElems[j]));
                return {
                    coords: coords,
                    times: times
                };
            }
            function getGeometry(root) {
                var geomNode, geomNodes, i, j, k, geoms = [], coordTimes = [];
                if (get1(root, 'MultiGeometry')) { return getGeometry(get1(root, 'MultiGeometry')); }
                if (get1(root, 'MultiTrack')) { return getGeometry(get1(root, 'MultiTrack')); }
                if (get1(root, 'gx:MultiTrack')) { return getGeometry(get1(root, 'gx:MultiTrack')); }
                for (i = 0; i < geotypes.length; i++) {
                    geomNodes = get(root, geotypes[i]);
                    if (geomNodes) {
                        for (j = 0; j < geomNodes.length; j++) {
                            geomNode = geomNodes[j];
                            if (geotypes[i] === 'Point') {
                                geoms.push({
                                    type: 'Point',
                                    coordinates: coord1(nodeVal(get1(geomNode, 'coordinates')))
                                });
                            } else if (geotypes[i] === 'LineString') {
                                geoms.push({
                                    type: 'LineString',
                                    coordinates: coord(nodeVal(get1(geomNode, 'coordinates')))
                                });
                            } else if (geotypes[i] === 'Polygon') {
                                var rings = get(geomNode, 'LinearRing'),
                                    coords = [];
                                for (k = 0; k < rings.length; k++) {
                                    coords.push(coord(nodeVal(get1(rings[k], 'coordinates'))));
                                }
                                geoms.push({
                                    type: 'Polygon',
                                    coordinates: coords
                                });
                            } else if (geotypes[i] === 'Track' ||
                                geotypes[i] === 'gx:Track') {
                                var track = gxCoords(geomNode);
                                geoms.push({
                                    type: 'LineString',
                                    coordinates: track.coords
                                });
                                if (track.times.length) coordTimes.push(track.times);
                            }
                        }
                    }
                }
                return {
                    geoms: geoms,
                    coordTimes: coordTimes
                };
            }
            function getPlacemark(root) {
                var geomsAndTimes = getGeometry(root), i, properties = {},
                    name = nodeVal(get1(root, 'name')),
                    address = nodeVal(get1(root, 'address')),
                    styleUrl = nodeVal(get1(root, 'styleUrl')),
                    description = nodeVal(get1(root, 'description')),
                    timeSpan = get1(root, 'TimeSpan'),
                    timeStamp = get1(root, 'TimeStamp'),
                    extendedData = get1(root, 'ExtendedData'),
                    lineStyle = get1(root, 'LineStyle'),
                    polyStyle = get1(root, 'PolyStyle'),
                    visibility = get1(root, 'visibility');

                if (!geomsAndTimes.geoms.length) return [];
                if (name) properties.name = name;
                if (address) properties.address = address;
                if (styleUrl) {
                    if (styleUrl[0] !== '#') {
                        styleUrl = '#' + styleUrl;
                    }

                    properties.styleUrl = styleUrl;
                    if (styleIndex[styleUrl]) {
                        properties.styleHash = styleIndex[styleUrl];
                    }
                    if (styleMapIndex[styleUrl]) {
                        properties.styleMapHash = styleMapIndex[styleUrl];
                        properties.styleHash = styleIndex[styleMapIndex[styleUrl].normal];
                    }
                    // Try to populate the lineStyle or polyStyle since we got the style hash
                    var style = styleByHash[properties.styleHash];
                    if (style) {
                        if (!lineStyle) lineStyle = get1(style, 'LineStyle');
                        if (!polyStyle) polyStyle = get1(style, 'PolyStyle');
                        var iconStyle = get1(style, 'IconStyle');
                        if (iconStyle) {
                            var icon = get1(iconStyle, 'Icon');
                            if (icon) {
                                var href = nodeVal(get1(icon, 'href'));
                                if (href) properties.icon = href;
                            }
                        }
                    }
                }
                if (description) properties.description = description;
                if (timeSpan) {
                    var begin = nodeVal(get1(timeSpan, 'begin'));
                    var end = nodeVal(get1(timeSpan, 'end'));
                    properties.timespan = { begin: begin, end: end };
                }
                if (timeStamp) {
                    properties.timestamp = nodeVal(get1(timeStamp, 'when'));
                }
                if (lineStyle) {
                    var linestyles = kmlColor(nodeVal(get1(lineStyle, 'color'))),
                        color = linestyles[0],
                        opacity = linestyles[1],
                        width = parseFloat(nodeVal(get1(lineStyle, 'width')));
                    if (color) properties.stroke = color;
                    if (!isNaN(opacity)) properties['stroke-opacity'] = opacity;
                    if (!isNaN(width)) properties['stroke-width'] = width;
                }
                if (polyStyle) {
                    var polystyles = kmlColor(nodeVal(get1(polyStyle, 'color'))),
                        pcolor = polystyles[0],
                        popacity = polystyles[1],
                        fill = nodeVal(get1(polyStyle, 'fill')),
                        outline = nodeVal(get1(polyStyle, 'outline'));
                    if (pcolor) properties.fill = pcolor;
                    if (!isNaN(popacity)) properties['fill-opacity'] = popacity;
                    if (fill) properties['fill-opacity'] = fill === '1' ? properties['fill-opacity'] || 1 : 0;
                    if (outline) properties['stroke-opacity'] = outline === '1' ? properties['stroke-opacity'] || 1 : 0;
                }
                if (extendedData) {
                    var datas = get(extendedData, 'Data'),
                        simpleDatas = get(extendedData, 'SimpleData');

                    for (i = 0; i < datas.length; i++) {
                        properties[datas[i].getAttribute('name')] = nodeVal(get1(datas[i], 'value'));
                    }
                    for (i = 0; i < simpleDatas.length; i++) {
                        properties[simpleDatas[i].getAttribute('name')] = nodeVal(simpleDatas[i]);
                    }
                }
                if (visibility) {
                    properties.visibility = nodeVal(visibility);
                }
                if (geomsAndTimes.coordTimes.length) {
                    properties.coordTimes = (geomsAndTimes.coordTimes.length === 1) ?
                        geomsAndTimes.coordTimes[0] : geomsAndTimes.coordTimes;
                }
                var feature = {
                    type: 'Feature',
                    geometry: (geomsAndTimes.geoms.length === 1) ? geomsAndTimes.geoms[0] : {
                        type: 'GeometryCollection',
                        geometries: geomsAndTimes.geoms
                    },
                    properties: properties
                };
                if (attr(root, 'id')) feature.id = attr(root, 'id');
                return [feature];
            }
            return gj;
        },
        gpx: function(doc) {
            var i,
                tracks = get(doc, 'trk'),
                routes = get(doc, 'rte'),
                waypoints = get(doc, 'wpt'),
                // a feature collection
                gj = fc(),
                feature;
            for (i = 0; i < tracks.length; i++) {
                feature = getTrack(tracks[i]);
                if (feature) gj.features.push(feature);
            }
            for (i = 0; i < routes.length; i++) {
                feature = getRoute(routes[i]);
                if (feature) gj.features.push(feature);
            }
            for (i = 0; i < waypoints.length; i++) {
                gj.features.push(getPoint(waypoints[i]));
            }
            function initializeArray(arr, size) {
                for (var h = 0; h < size; h++) {
                    arr.push(null);
                }
                return arr;
            }
            function getPoints(node, pointname) {
                var pts = get(node, pointname),
                    line = [],
                    times = [],
                    heartRates = [],
                    l = pts.length;
                if (l < 2) return {};  // Invalid line in GeoJSON
                for (var i = 0; i < l; i++) {
                    var c = coordPair(pts[i]);
                    line.push(c.coordinates);
                    if (c.time) times.push(c.time);
                    if (c.heartRate || heartRates.length) {
                        if (!heartRates.length) initializeArray(heartRates, i);
                        heartRates.push(c.heartRate || null);
                    }
                }
                return {
                    line: line,
                    times: times,
                    heartRates: heartRates
                };
            }
            function getTrack(node) {
                var segments = get(node, 'trkseg'),
                    track = [],
                    times = [],
                    heartRates = [],
                    line;
                for (var i = 0; i < segments.length; i++) {
                    line = getPoints(segments[i], 'trkpt');
                    if (line) {
                        if (line.line) track.push(line.line);
                        if (line.times && line.times.length) times.push(line.times);
                        if (heartRates.length || (line.heartRates && line.heartRates.length)) {
                            if (!heartRates.length) {
                                for (var s = 0; s < i; s++) {
                                    heartRates.push(initializeArray([], track[s].length));
                                }
                            }
                            if (line.heartRates && line.heartRates.length) {
                                heartRates.push(line.heartRates);
                            } else {
                                heartRates.push(initializeArray([], line.line.length || 0));
                            }
                        }
                    }
                }
                if (track.length === 0) return;
                var properties = getProperties(node);
                extend(properties, getLineStyle(get1(node, 'extensions')));
                if (times.length) properties.coordTimes = track.length === 1 ? times[0] : times;
                if (heartRates.length) properties.heartRates = track.length === 1 ? heartRates[0] : heartRates;
                return {
                    type: 'Feature',
                    properties: properties,
                    geometry: {
                        type: track.length === 1 ? 'LineString' : 'MultiLineString',
                        coordinates: track.length === 1 ? track[0] : track
                    }
                };
            }
            function getRoute(node) {
                var line = getPoints(node, 'rtept');
                if (!line.line) return;
                var prop = getProperties(node);
                extend(prop, getLineStyle(get1(node, 'extensions')));
                var routeObj = {
                    type: 'Feature',
                    properties: prop,
                    geometry: {
                        type: 'LineString',
                        coordinates: line.line
                    }
                };
                return routeObj;
            }
            function getPoint(node) {
                var prop = getProperties(node);
                extend(prop, getMulti(node, ['sym']));
                return {
                    type: 'Feature',
                    properties: prop,
                    geometry: {
                        type: 'Point',
                        coordinates: coordPair(node).coordinates
                    }
                };
            }
            function getLineStyle(extensions) {
                var style = {};
                if (extensions) {
                    var lineStyle = get1(extensions, 'line');
                    if (lineStyle) {
                        var color = nodeVal(get1(lineStyle, 'color')),
                            opacity = parseFloat(nodeVal(get1(lineStyle, 'opacity'))),
                            width = parseFloat(nodeVal(get1(lineStyle, 'width')));
                        if (color) style.stroke = color;
                        if (!isNaN(opacity)) style['stroke-opacity'] = opacity;
                        // GPX width is in mm, convert to px with 96 px per inch
                        if (!isNaN(width)) style['stroke-width'] = width * 96 / 25.4;
                    }
                }
                return style;
            }
            function getProperties(node) {
                var prop = getMulti(node, ['name', 'cmt', 'desc', 'type', 'time', 'keywords']),
                    links = get(node, 'link');
                if (links.length) prop.links = [];
                for (var i = 0, link; i < links.length; i++) {
                    link = { href: attr(links[i], 'href') };
                    extend(link, getMulti(links[i], ['text', 'type']));
                    prop.links.push(link);
                }
                return prop;
            }
            return gj;
        }
    };
    return t;
})();

if (typeof module !== 'undefined') module.exports = toGeoJSON;











</script>